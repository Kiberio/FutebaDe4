//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Teste.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Teste: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Teste()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Teste"",
    ""maps"": [
        {
            ""name"": ""Movimentação"",
            ""id"": ""b475cc40-76f2-44c5-b1a3-b09d6eb15815"",
            ""actions"": [
                {
                    ""name"": ""Movimento"",
                    ""type"": ""Value"",
                    ""id"": ""cce9f18e-d955-4318-b07c-c03398c0db74"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Teclado wasd"",
                    ""id"": ""a491d628-7d1f-4ea3-acbf-8bb12dfe81f5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6085882c-644e-4517-841c-13feeb76e523"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ba565131-b98d-4b3c-b05f-21a3f814b37e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c756ceb1-b770-43d5-895a-a2f86a954919"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a44aea7c-37e6-4b86-81e7-8854b487d673"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Jogador 1"",
            ""id"": ""78817859-c36c-4b5f-b9e6-cc3885645a7d"",
            ""actions"": [
                {
                    ""name"": ""Movimento"",
                    ""type"": ""Value"",
                    ""id"": ""3a9a9bc5-953c-455b-ab01-e9d58eca4988"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""teclado wasd"",
                    ""id"": ""15db5339-842c-4598-9f94-a720a453a30d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5b94f6d1-790d-4c7c-84d2-5554611076e4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""12c78166-39a7-4075-849d-01964f654e8d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dab06bc7-80b7-4331-976d-35421e58f430"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bceeca80-7a82-4f8b-8c84-c637de859e85"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movimentação
        m_Movimentação = asset.FindActionMap("Movimentação", throwIfNotFound: true);
        m_Movimentação_Movimento = m_Movimentação.FindAction("Movimento", throwIfNotFound: true);
        // Jogador 1
        m_Jogador1 = asset.FindActionMap("Jogador 1", throwIfNotFound: true);
        m_Jogador1_Movimento = m_Jogador1.FindAction("Movimento", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movimentação
    private readonly InputActionMap m_Movimentação;
    private List<IMovimentaçãoActions> m_MovimentaçãoActionsCallbackInterfaces = new List<IMovimentaçãoActions>();
    private readonly InputAction m_Movimentação_Movimento;
    public struct MovimentaçãoActions
    {
        private @Teste m_Wrapper;
        public MovimentaçãoActions(@Teste wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movimento => m_Wrapper.m_Movimentação_Movimento;
        public InputActionMap Get() { return m_Wrapper.m_Movimentação; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovimentaçãoActions set) { return set.Get(); }
        public void AddCallbacks(IMovimentaçãoActions instance)
        {
            if (instance == null || m_Wrapper.m_MovimentaçãoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovimentaçãoActionsCallbackInterfaces.Add(instance);
            @Movimento.started += instance.OnMovimento;
            @Movimento.performed += instance.OnMovimento;
            @Movimento.canceled += instance.OnMovimento;
        }

        private void UnregisterCallbacks(IMovimentaçãoActions instance)
        {
            @Movimento.started -= instance.OnMovimento;
            @Movimento.performed -= instance.OnMovimento;
            @Movimento.canceled -= instance.OnMovimento;
        }

        public void RemoveCallbacks(IMovimentaçãoActions instance)
        {
            if (m_Wrapper.m_MovimentaçãoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovimentaçãoActions instance)
        {
            foreach (var item in m_Wrapper.m_MovimentaçãoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovimentaçãoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovimentaçãoActions @Movimentação => new MovimentaçãoActions(this);

    // Jogador 1
    private readonly InputActionMap m_Jogador1;
    private List<IJogador1Actions> m_Jogador1ActionsCallbackInterfaces = new List<IJogador1Actions>();
    private readonly InputAction m_Jogador1_Movimento;
    public struct Jogador1Actions
    {
        private @Teste m_Wrapper;
        public Jogador1Actions(@Teste wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movimento => m_Wrapper.m_Jogador1_Movimento;
        public InputActionMap Get() { return m_Wrapper.m_Jogador1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Jogador1Actions set) { return set.Get(); }
        public void AddCallbacks(IJogador1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Jogador1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Jogador1ActionsCallbackInterfaces.Add(instance);
            @Movimento.started += instance.OnMovimento;
            @Movimento.performed += instance.OnMovimento;
            @Movimento.canceled += instance.OnMovimento;
        }

        private void UnregisterCallbacks(IJogador1Actions instance)
        {
            @Movimento.started -= instance.OnMovimento;
            @Movimento.performed -= instance.OnMovimento;
            @Movimento.canceled -= instance.OnMovimento;
        }

        public void RemoveCallbacks(IJogador1Actions instance)
        {
            if (m_Wrapper.m_Jogador1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJogador1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Jogador1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Jogador1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Jogador1Actions @Jogador1 => new Jogador1Actions(this);
    public interface IMovimentaçãoActions
    {
        void OnMovimento(InputAction.CallbackContext context);
    }
    public interface IJogador1Actions
    {
        void OnMovimento(InputAction.CallbackContext context);
    }
}
